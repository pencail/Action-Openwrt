#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: OpenWrt编译

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: '是否开启SSH'   #默认 false ，true 为开启
        required: false
        default: 'false'

env:
  GITHUB_LINK: https://github.com/${{github.repository}}
  GIT_REPOSITORY: ${{github.repository}}
  UPLOAD_BIN_DIR: false                         #上传 bin 目录。即包含所有 ipk 文件和固件的目录。默认false
  UPLOAD_FIRMWARE: true                         #上传固件目录。默认true
  UPLOAD_RELEASE: false                         #上传固件到 releases 。默认false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04


    #选择系统版本
    name: 编译${{matrix.target}}
    strategy:
      fail-fast: false                      # true：只要流程中有失败，自动停止所有流程
      matrix:
        target: [openwrt_23.05.0]

    steps:
    - name: 拉取仓库
      uses: actions/checkout@main

    - name: 检测脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"

        echo "REPO_URL=${REPO_URL}" >> ${GITHUB_ENV}
        echo "REPO_BRANCH=${REPO_BRANCH}" >> ${GITHUB_ENV}
        echo "CONFIG_FILE=${CONFIG_FILE}" >> ${GITHUB_ENV}
        echo "FEEDS_CONF=${FEEDS_CONF}" >> ${GITHUB_ENV}
        echo "DIY_P1_SH=${DIY_P1_SH}" >> ${GITHUB_ENV}
        echo "DIY_P2_SH=${DIY_P2_SH}" >> ${GITHUB_ENV}

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev        
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
#        sudo -E apt-get -qq update
#        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
#        sudo -E apt-get -qq autoremove --purge
#        sudo -E apt-get -qq clean
#        sudo timedatectl set-timezone "$TZ"
#        sudo mkdir -p /workdir
#        sudo chown $USER:$GROUPS /workdir

    - name: 下载固件
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载自定义源(feeds)，同时运行part1脚本
      run: |
        if [ -f "build/${{matrix.target}}/$FEEDS_CONF" ]; then
          cp build/${{matrix.target}}/$FEEDS_CONF openwrt/feeds.conf.default
        fi
        
        chmod +x build/${{matrix.target}}/$DIY_P1_SH
        cd openwrt
        /bin/bash "$GITHUB_WORKSPACE/build/${{matrix.target}}/$DIY_P1_SH"
#        [ -e $FEEDS_CONF ] && 

    - name: 更新自定义源(feeds)
      run: cd openwrt && ./scripts/feeds update -a
    
    - name: 删除自定义源中的argon和argone
      run: |
        cd openwrt
        rm -rf feeds/kiddin9/luci-theme-argon
        rm -rf feeds/kiddin9/luci-theme-argon-config
#        rm -rf feeds/kenzo/luci-theme-argon
#        rm -rf feeds/kenzo/luci-them-argone
#        rm -rf feeds/kenzo/luci-app-argone-config
    
    - name: 安装自定义源(feeds)
      run: cd openwrt && ./scripts/feeds install -a
      

    - name: 加载配置文件(config)，同时运行part2脚本
      run: |
        cp build/${{matrix.target}}/$CONFIG_FILE openwrt/.config
        chmod +x build/${{matrix.target}}/$DIY_P2_SH    
        cd openwrt
        /bin/bash "$GITHUB_WORKSPACE/build/${{matrix.target}}/$DIY_P2_SH"
#        [ -e $CONFIG_FILE ] && 
        
    - name: 加载file文件
      run: |
        if [ -n "$(ls -A "build/${{matrix.target}}/DIY" 2>/dev/null)" ]; then
          cp -Rf $GITHUB_WORKSPACE/build/${{matrix.target}}/DIY/* openwrt
        fi

    - name: SSH远程连接服务器配置固件 
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传bin文件夹(固件+ipk)在github空间
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件夹
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
#        echo "::set-output name=status::success"

    - name: 上传固件在github空间
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 自动发布固件
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

#    - name: 删除工作流
#      uses: GitRML/delete-workflow-runs@main
#      with:
#        retain_days: 1
#        keep_minimum_runs: 3

    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
