name: 测试

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: '是否开启SSH'   #默认 false ，true 为开启
        required: false
        default: 'false'

env:
  GITHUB_LINK: https://github.com/${{github.repository}}
  GIT_REPOSITORY: ${{github.repository}}
#  REPO_URL: https://github.com/openwrt/openwrt
#  REPO_BRANCH: v21.02.5
#  FEEDS_CONF: feeds.conf.default
#  CONFIG_FILE: .config
#  DIY_P1_SH: diy-part1.sh
#  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false           #上传 bin 目录。即包含所有 ipk 文件和固件的目录。默认false
  UPLOAD_FIRMWARE: true           #上传固件目录。默认true
  UPLOAD_RELEASE: false           #上传固件到 releases 。默认false
  TZ: Asia/Shanghai

  test: Hello

jobs:
  build:
    runs-on: ubuntu-22.04

    name: 编译${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [openwrt_23.05.0]

    steps:
    - name: 准备结束
      uses: actions/checkout@main

    - uses: de-vri-es/setup-git-credentials@v2
      with:
        credentials: https://pencail:${{ secrets.TOKEN_PENCAIL }}@github.com/

    - name: 检测脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo ${GITHUB_WORKSPACE}
        
        echo "REPO_URL=${REPO_URL}" >> ${GITHUB_ENV}
        echo "REPO_BRANCH=${REPO_BRANCH}" >> ${GITHUB_ENV}
        echo "CONFIG_FILE=${CONFIG_FILE}" >> ${GITHUB_ENV}
        echo "FEEDS_CONF=${FEEDS_CONF}" >> ${GITHUB_ENV}
        echo "DIY_P1_SH=${DIY_P1_SH}" >> ${GITHUB_ENV}
        echo "DIY_P2_SH=${DIY_P2_SH}" >> ${GITHUB_ENV}

    - name: 测试if
      if: env.test == 'Hello'
      run: |
        echo "hello"
    
    - name: 反向测试
      if: ! env.test == 'Hello'
      run: |
        echo "error"
#    - name: 部署编译环境
#      env:
#        DEBIAN_FRONTEND: noninteractive
#      run: |
#        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
#        sudo docker image prune --all --force
#        sudo -E apt-get -qq update
#        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev        
#        sudo -E apt-get -qq autoremove --purge
#        sudo -E apt-get -qq clean
#        sudo timedatectl set-timezone "$TZ"
#        sudo mkdir -p /workdir
#        sudo chown $USER:$GROUPS /workdir
    
#    - name: 下载固件
#      working-directory: /workdir
#      run: |
#        df -hT $PWD
#        git clone $REPO_URL -b $REPO_BRANCH openwrt
#        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

#    - name: 加载自定义源(feeds)，同时运行part1脚本
#      run: |
#        if [ -f "build/${{matrix.target}}/$FEEDS_CONF" ]; then
#          cp build/${{matrix.target}}/$FEEDS_CONF openwrt/feeds.conf.default
#        fi
        
#        chmod +x build/${{matrix.target}}/$DIY_P1_SH
#        cd openwrt
#        /bin/bash "$GITHUB_WORKSPACE/build/${{matrix.target}}/$DIY_P1_SH"

#    - name: 更新自定义源(feeds)
#      run: cd openwrt && ./scripts/feeds update -a     

#    - name: 查看错误
#      run: |
#        cd openwrt
#        cat logs/feeds/pencail/ntfs3-mount/dump.txt
